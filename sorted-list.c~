//< sorted-list.c>
 
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include "sorted-list.h"

static void SLDeleteNode(NodePtr, DestructFuncT);

/*
 * SLCreate creates a new, empty sorted list.  The caller must provide
 * a comparator function that can be used to order objects that will be
 * kept in the list, and a destruct function that gets rid of the objects
 * once they are no longer in the list or referred to in an iterator.
 * 
 * If the function succeeds, it returns a (non-NULL) SortedListT object.
 * otherwise, it returns NULL.
 *
 * You need to fill in this function as part of your implementation.
 */

SortedListPtr SLCreate(CompareFuncT cf, DestructFuncT df)
{
  if(cf == NULL || df == NULL)
    {
      return NULL;
    }
  SortedListPtr list=(SortedListPtr)malloc(sizeof(struct SortedList));
  list -> front = NULL;
  list -> size = 0;
  list -> comparefunct = cf;
  list -> destructfunct = df;

  return list;
}

/*
 * SLDestroy destroys a list, freeing all dynamically allocated memory.
 *
 * You need to fill in this function as part of your implementation.
 */
void SLDestroy(SortedListPtr list)
{
  DestructFuncT df = list-> destructfunct;

  while(list->front != NULL)
    {
      NodePtr tmp = list->front;
      list->front = tmp->next;
      if(tmp->data != NULL)
	{
	  df(tmp->data);
	}
      free(tmp);
    }
  free(list);
}


/*
 * SLInsert inserts a given object into a sorted list, maintaining sorted
 * order of all objects in the list.  If the new object is equal to a subset
 * of existing objects in the list, then the subset can be kept in any
 * order.
 *
 * If the function succeeds, it returns 1. otherwise, it returns 0.
 *
 * You need to fill in this function as part of your implementation.
 */

int SLInsert(SortedListPtr list, void *newObj)
{
  // Erorr!Wrong input!
  if(list ==NULL || newObj ==NULL)
    {
      return 0;
    }
  NodePtr newNode = (NodePtr)malloc(sizeof(struct Node));
  newNode -> data = newObj;
  newNode -> next = NULL;
  newNode-> refCount = 1;


  // No head, New Node is Head
  if(list -> size ==0)
    {
      list -> front = newNode;
      list -> size++;
      return 1;
    }
  NodePtr current = list -> front;
  NodePtr prev = NULL;

  CompareFuncT cf = list -> comparefunct;
  int compare = cf ((current-> data), newObj);

  //Duplictae insert
  if(compare == 0)
    {
      free(newNode);
      return 0;
    }

  //inserting before the Head
  if(compare<0)
    {
      newNode->next =list->front;
      list -> front = newNode;
      list -> size++;
      return 1;
    }

  while (1)
    {
      prev = current;
      current = current ->next;

      //add to tail
      if ( current == NULL)
	{
	  prev -> next = newNode;
	  list -> size++;
	  return 1;
	}
      compare = cf ((current -> data), newObj);

      //dublicate insert
      if (compare==0)
	{
	  free(newNode);
	  return 0;
	}

      // add in middle
      if(compare < 0)
	{
	  newNode -> next = current;
	  prev -> next = newNode;
	  list -> size++;
	  return 1;
	}
    }
  free (newNode);
  return 0;
      
}


/*
 * SLRemove removes a given object from a sorted list.  Sorted ordering
 * should be maintained.
 *
 * If the function succeeds, it returns 1.  otherwise, it returns 0.
 *
 * You need to fill in this function as part of your implementation.
 */

int SLRemove(SortedListPtr list, void *newObj)
{
  if (list == NULL || newObj ==NULL || list->front ==NULL)
    {
      return 0;
    }
  NodePtr current = list -> front;
  NodePtr prev = NULL;

  //comparison -1:current is smaller, 0: equal, 1:current is larger
  int compare = list->comparefunct((current->data),newObj);
  int isHead = ((compare==0) ? 1:0 );

  //iter through list and stop if equal or current is less than newObj.
  while (compare >0)
    {
      prev = current;
      current = current -> next;
      if (current == NULL)
	{
	  break;
	}
      compare = list ->comparefunct((current->data), newObj);
    }

  // if match = remove the Node
  if(compare ==0)
    {
      NodePtr next = current -> next;

      //check the head
      if (isHead)
	{
	  list -> front = next; // next is init to NULL
	}
      else
	{
	  prev -> next = next;
	}

      //if current != tail; increment the refCount of the next Node
      if (next != NULL)
	{
	  next -> refCount++;
	}
      // decrement refCount ig greater than 1, Else Remove the Node
      if ( current -> refCount > 1)
	{
	  current-> refCount--;
	}
      else
	{
	  SLDeleteNode(current, list-> destructfunct);
	}
      list -> size--;
      return 1; // Decrement size of the list and Return
    }
  return 0;
}

/*
 * SLCreateIterator creates an iterator object that will allow the caller
 * to "walk" through the list from beginning to the end using SLNextItem.
 *
 * If the function succeeds, it returns a non-NULL SortedListIterT object.
 * otherwise, it returns NULL.
 *
 * You need to fill in this function as part of your implementation.
 */

SortedListIteratorPtr SLCreateIterator(SortedListPtr list )
{
  if(list == NULL || list -> size <= 0)
    {
      return NULL;
    }
  SortedListIteratorPtr iter = (SortedListIteratorPtr)malloc(sizeof(struct SortedListIterator));

  iter -> current = list -> front;
  iter -> current -> refCount++;
  iter -> destructfunct=list -> destructfunct;

  return iter;
}


/*
 * SLDestroyIterator destroys an iterator object that was created using
 * SLCreateIterator().  Note that this function should destroy the
 * iterator but should NOT affectt the original list used to create
 * the iterator in any way.
 *
 * You need to fill in this function as part of your implementation.
 */

void SLDestroyIterator( SortedListIteratorPtr iter )
{
  if(iter == NULL)
    {
      return; // 0 or 1?
    }
  if(iter -> current != NULL)
    {
      iter -> current -> refCount--;
      if(iter-> current->refCount<1)
	{
	  SLDeleteNode(iter -> current, iter->destructfunct);
	}
    }
  free(iter);
}

/*
 I added few more funcution that was necessary for my code to Implement
*/
void* SLGetItem(SortedListIteratorPtr iter )
{
  if(iter == NULL || iter -> current == NULL)
    {
      return 0;
    }
  return iter -> current->data;
}


/*
 * SLNextItem returns the next object in the list encapsulated by the
 * given iterator.  It should return a NULL when the end of the list
 * has been reached.
 *
 * One complication you MUST consider/address is what happens if a
 * sorted list encapsulated within an iterator is modified while that
 * iterator is active.  For example, what if an iterator is "pointing"
 * to some object in the list as the next one to be returned but that
 * object is removed from the list using SLRemove() before SLNextItem()
 * is called.
 *
 * You need to fill in this function as part of your implementation.
 */

void *SLNextItem( SortedListIteratorPtr iter )
{
  if(iter == NULL || iter-> current == NULL || iter->current->next == NULL)
    {
      return NULL;
    }
  NodePtr ptr;
  ptr = iter->current;
  ptr -> refCount--;

  NodePtr toDelete = NULL;

  //if refCount  = 0 ,mark to be Deleted
  if (ptr->refCount == 0)
    {
      toDelete = ptr;
    }
  // increment the pointer to Next Node; add to refCount
  ptr = ptr-> next;
  ptr-> refCount++;
  iter-> current = ptr;

  if(toDelete != NULL)
    {
      SLDeleteNode(toDelete, iter-> destructfunct);
    }
  return iter->current-> data;
}

/*
 *frees space allocated by node, and decrements refCount of the next Node
 *only called when a Node no longer point to anything
 */

static void SLDeleteNode(NodePtr ptr, DestructFuncT df)
{
  if(ptr==NULL)
    {
      return;
    }
  if(ptr-> next != NULL)
    {
      ptr-> next->refCount--;
    }
  df(ptr->data);
  free(ptr);
}


/*
 * You should use main to write code that will test your sorted list implementation.
 * You may define test data and lists in this file as test cases.
 * We have provided you with a few sample CompareFuncT comparator functions.
 */


